package ww.greendao.dao;

import ww.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CLASSES.
 */
public class Classes {

    /** Not-null value. */
    private String GradeCode;
    private String ClassCode;
    private String ClassName;
    private String Remark1;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ClassesDao myDao;

    private Grade grade;
    private String grade__resolvedKey;


    public Classes() {
    }

    public Classes(String GradeCode, String ClassCode, String ClassName, String Remark1) {
        this.GradeCode = GradeCode;
        this.ClassCode = ClassCode;
        this.ClassName = ClassName;
        this.Remark1 = Remark1;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getClassesDao() : null;
    }

    /** Not-null value. */
    public String getGradeCode() {
        return GradeCode;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setGradeCode(String GradeCode) {
        this.GradeCode = GradeCode;
    }

    public String getClassCode() {
        return ClassCode;
    }

    public void setClassCode(String ClassCode) {
        this.ClassCode = ClassCode;
    }

    public String getClassName() {
        return ClassName;
    }

    public void setClassName(String ClassName) {
        this.ClassName = ClassName;
    }

    public String getRemark1() {
        return Remark1;
    }

    public void setRemark1(String Remark1) {
        this.Remark1 = Remark1;
    }

    /** To-one relationship, resolved on first access. */
    public Grade getGrade() {
        String __key = this.GradeCode;
        if (grade__resolvedKey == null || grade__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GradeDao targetDao = daoSession.getGradeDao();
            Grade gradeNew = targetDao.load(__key);
            synchronized (this) {
                grade = gradeNew;
            	grade__resolvedKey = __key;
            }
        }
        return grade;
    }

    public void setGrade(Grade grade) {
        if (grade == null) {
            throw new DaoException("To-one property 'GradeCode' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.grade = grade;
            GradeCode = grade.getGradeCode();
            grade__resolvedKey = GradeCode;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
