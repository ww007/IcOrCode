package ww.greendao.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import ww.greendao.dao.RoundResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ROUND_RESULT.
*/
public class RoundResultDao extends AbstractDao<RoundResult, Long> {

    public static final String TABLENAME = "ROUND_RESULT";

    /**
     * Properties of entity RoundResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RoundResultID = new Property(0, Long.class, "RoundResultID", true, "ROUND_RESULT_ID");
        public final static Property StudentItemID = new Property(1, long.class, "StudentItemID", false, "STUDENT_ITEM_ID");
        public final static Property StudentCode = new Property(2, String.class, "studentCode", false, "STUDENT_CODE");
        public final static Property ItemCode = new Property(3, String.class, "itemCode", false, "ITEM_CODE");
        public final static Property Result = new Property(4, Integer.class, "Result", false, "RESULT");
        public final static Property RoundNo = new Property(5, Integer.class, "RoundNo", false, "ROUND_NO");
        public final static Property TestTime = new Property(6, String.class, "TestTime", false, "TEST_TIME");
        public final static Property ResultState = new Property(7, Integer.class, "ResultState", false, "RESULT_STATE");
        public final static Property IsLastResult = new Property(8, Integer.class, "IsLastResult", false, "IS_LAST_RESULT");
        public final static Property Mac = new Property(9, String.class, "Mac", false, "MAC");
        public final static Property Remark1 = new Property(10, String.class, "Remark1", false, "REMARK1");
        public final static Property Remark2 = new Property(11, String.class, "Remark2", false, "REMARK2");
    };

    private DaoSession daoSession;

    private Query<RoundResult> studentItem_RoundResultsQuery;

    public RoundResultDao(DaoConfig config) {
        super(config);
    }
    
    public RoundResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ROUND_RESULT' (" + //
                "'ROUND_RESULT_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: RoundResultID
                "'STUDENT_ITEM_ID' INTEGER NOT NULL ," + // 1: StudentItemID
                "'STUDENT_CODE' TEXT," + // 2: studentCode
                "'ITEM_CODE' TEXT," + // 3: itemCode
                "'RESULT' INTEGER," + // 4: Result
                "'ROUND_NO' INTEGER," + // 5: RoundNo
                "'TEST_TIME' TEXT," + // 6: TestTime
                "'RESULT_STATE' INTEGER," + // 7: ResultState
                "'IS_LAST_RESULT' INTEGER," + // 8: IsLastResult
                "'MAC' TEXT," + // 9: Mac
                "'REMARK1' TEXT," + // 10: Remark1
                "'REMARK2' TEXT);"); // 11: Remark2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ROUND_RESULT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RoundResult entity) {
        stmt.clearBindings();
 
        Long RoundResultID = entity.getRoundResultID();
        if (RoundResultID != null) {
            stmt.bindLong(1, RoundResultID);
        }
        stmt.bindLong(2, entity.getStudentItemID());
 
        String studentCode = entity.getStudentCode();
        if (studentCode != null) {
            stmt.bindString(3, studentCode);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(4, itemCode);
        }
 
        Integer Result = entity.getResult();
        if (Result != null) {
            stmt.bindLong(5, Result);
        }
 
        Integer RoundNo = entity.getRoundNo();
        if (RoundNo != null) {
            stmt.bindLong(6, RoundNo);
        }
 
        String TestTime = entity.getTestTime();
        if (TestTime != null) {
            stmt.bindString(7, TestTime);
        }
 
        Integer ResultState = entity.getResultState();
        if (ResultState != null) {
            stmt.bindLong(8, ResultState);
        }
 
        Integer IsLastResult = entity.getIsLastResult();
        if (IsLastResult != null) {
            stmt.bindLong(9, IsLastResult);
        }
 
        String Mac = entity.getMac();
        if (Mac != null) {
            stmt.bindString(10, Mac);
        }
 
        String Remark1 = entity.getRemark1();
        if (Remark1 != null) {
            stmt.bindString(11, Remark1);
        }
 
        String Remark2 = entity.getRemark2();
        if (Remark2 != null) {
            stmt.bindString(12, Remark2);
        }
    }

    @Override
    protected void attachEntity(RoundResult entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RoundResult readEntity(Cursor cursor, int offset) {
        RoundResult entity = new RoundResult( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // RoundResultID
            cursor.getLong(offset + 1), // StudentItemID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // studentCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itemCode
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Result
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // RoundNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TestTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // ResultState
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // IsLastResult
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Mac
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Remark1
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // Remark2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RoundResult entity, int offset) {
        entity.setRoundResultID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStudentItemID(cursor.getLong(offset + 1));
        entity.setStudentCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItemCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setResult(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRoundNo(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTestTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setResultState(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsLastResult(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMac(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRemark1(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRemark2(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RoundResult entity, long rowId) {
        entity.setRoundResultID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RoundResult entity) {
        if(entity != null) {
            return entity.getRoundResultID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "roundResults" to-many relationship of StudentItem. */
    public List<RoundResult> _queryStudentItem_RoundResults(long StudentItemID) {
        synchronized (this) {
            if (studentItem_RoundResultsQuery == null) {
                QueryBuilder<RoundResult> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StudentItemID.eq(null));
                studentItem_RoundResultsQuery = queryBuilder.build();
            }
        }
        Query<RoundResult> query = studentItem_RoundResultsQuery.forCurrentThread();
        query.setParameter(0, StudentItemID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getStudentItemDao().getAllColumns());
            builder.append(" FROM ROUND_RESULT T");
            builder.append(" LEFT JOIN STUDENT_ITEM T0 ON T.'STUDENT_ITEM_ID'=T0.'STUDENT_ITEM_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RoundResult loadCurrentDeep(Cursor cursor, boolean lock) {
        RoundResult entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        StudentItem studentItem = loadCurrentOther(daoSession.getStudentItemDao(), cursor, offset);
         if(studentItem != null) {
            entity.setStudentItem(studentItem);
        }

        return entity;    
    }

    public RoundResult loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RoundResult> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RoundResult> list = new ArrayList<RoundResult>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RoundResult> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RoundResult> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
