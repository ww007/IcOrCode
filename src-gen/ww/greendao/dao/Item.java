package ww.greendao.dao;

import java.util.List;
import ww.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ITEM.
 */
public class Item {

    private String ItemCode;
    private String ItemName;
    private Integer MinValue;
    private Integer MaxValue;
    private String Unit;
    private Integer DataLen;
    private Integer CarryMode;
    private Integer ItemType;
    private String MachineCode;
    private Integer IsEnable;
    private String Remark1;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ItemDao myDao;

    private List<StudentItem> studentItems2;

    public Item() {
    }

    public Item(String ItemCode) {
        this.ItemCode = ItemCode;
    }

    public Item(String ItemCode, String ItemName, Integer MinValue, Integer MaxValue, String Unit, Integer DataLen, Integer CarryMode, Integer ItemType, String MachineCode, Integer IsEnable, String Remark1) {
        this.ItemCode = ItemCode;
        this.ItemName = ItemName;
        this.MinValue = MinValue;
        this.MaxValue = MaxValue;
        this.Unit = Unit;
        this.DataLen = DataLen;
        this.CarryMode = CarryMode;
        this.ItemType = ItemType;
        this.MachineCode = MachineCode;
        this.IsEnable = IsEnable;
        this.Remark1 = Remark1;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getItemDao() : null;
    }

    public String getItemCode() {
        return ItemCode;
    }

    public void setItemCode(String ItemCode) {
        this.ItemCode = ItemCode;
    }

    public String getItemName() {
        return ItemName;
    }

    public void setItemName(String ItemName) {
        this.ItemName = ItemName;
    }

    public Integer getMinValue() {
        return MinValue;
    }

    public void setMinValue(Integer MinValue) {
        this.MinValue = MinValue;
    }

    public Integer getMaxValue() {
        return MaxValue;
    }

    public void setMaxValue(Integer MaxValue) {
        this.MaxValue = MaxValue;
    }

    public String getUnit() {
        return Unit;
    }

    public void setUnit(String Unit) {
        this.Unit = Unit;
    }

    public Integer getDataLen() {
        return DataLen;
    }

    public void setDataLen(Integer DataLen) {
        this.DataLen = DataLen;
    }

    public Integer getCarryMode() {
        return CarryMode;
    }

    public void setCarryMode(Integer CarryMode) {
        this.CarryMode = CarryMode;
    }

    public Integer getItemType() {
        return ItemType;
    }

    public void setItemType(Integer ItemType) {
        this.ItemType = ItemType;
    }

    public String getMachineCode() {
        return MachineCode;
    }

    public void setMachineCode(String MachineCode) {
        this.MachineCode = MachineCode;
    }

    public Integer getIsEnable() {
        return IsEnable;
    }

    public void setIsEnable(Integer IsEnable) {
        this.IsEnable = IsEnable;
    }

    public String getRemark1() {
        return Remark1;
    }

    public void setRemark1(String Remark1) {
        this.Remark1 = Remark1;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StudentItem> getStudentItems2() {
        if (studentItems2 == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentItemDao targetDao = daoSession.getStudentItemDao();
            List<StudentItem> studentItems2New = targetDao._queryItem_StudentItems2(ItemCode);
            synchronized (this) {
                if(studentItems2 == null) {
                    studentItems2 = studentItems2New;
                }
            }
        }
        return studentItems2;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStudentItems2() {
        studentItems2 = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
