package ww.greendao.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import ww.greendao.dao.StudentItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STUDENT_ITEM.
*/
public class StudentItemDao extends AbstractDao<StudentItem, Long> {

    public static final String TABLENAME = "STUDENT_ITEM";

    /**
     * Properties of entity StudentItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property StudentItemID = new Property(0, Long.class, "StudentItemID", true, "STUDENT_ITEM_ID");
        public final static Property StudentCode = new Property(1, String.class, "StudentCode", false, "STUDENT_CODE");
        public final static Property ItemCode = new Property(2, String.class, "ItemCode", false, "ITEM_CODE");
        public final static Property LastResult = new Property(3, Integer.class, "lastResult", false, "LAST_RESULT");
        public final static Property ResultState = new Property(4, Integer.class, "resultState", false, "RESULT_STATE");
        public final static Property LastTestTime = new Property(5, String.class, "lastTestTime", false, "LAST_TEST_TIME");
        public final static Property TestState = new Property(6, Integer.class, "TestState", false, "TEST_STATE");
        public final static Property Remark1 = new Property(7, String.class, "Remark1", false, "REMARK1");
        public final static Property Remark2 = new Property(8, String.class, "Remark2", false, "REMARK2");
        public final static Property Remark3 = new Property(9, String.class, "Remark3", false, "REMARK3");
    };

    private DaoSession daoSession;

    private Query<StudentItem> student_StudentItems1Query;
    private Query<StudentItem> item_StudentItems2Query;

    public StudentItemDao(DaoConfig config) {
        super(config);
    }
    
    public StudentItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STUDENT_ITEM' (" + //
                "'STUDENT_ITEM_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: StudentItemID
                "'STUDENT_CODE' TEXT NOT NULL ," + // 1: StudentCode
                "'ITEM_CODE' TEXT NOT NULL ," + // 2: ItemCode
                "'LAST_RESULT' INTEGER," + // 3: lastResult
                "'RESULT_STATE' INTEGER," + // 4: resultState
                "'LAST_TEST_TIME' TEXT," + // 5: lastTestTime
                "'TEST_STATE' INTEGER," + // 6: TestState
                "'REMARK1' TEXT," + // 7: Remark1
                "'REMARK2' TEXT," + // 8: Remark2
                "'REMARK3' TEXT);"); // 9: Remark3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STUDENT_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StudentItem entity) {
        stmt.clearBindings();
 
        Long StudentItemID = entity.getStudentItemID();
        if (StudentItemID != null) {
            stmt.bindLong(1, StudentItemID);
        }
        stmt.bindString(2, entity.getStudentCode());
        stmt.bindString(3, entity.getItemCode());
 
        Integer lastResult = entity.getLastResult();
        if (lastResult != null) {
            stmt.bindLong(4, lastResult);
        }
 
        Integer resultState = entity.getResultState();
        if (resultState != null) {
            stmt.bindLong(5, resultState);
        }
 
        String lastTestTime = entity.getLastTestTime();
        if (lastTestTime != null) {
            stmt.bindString(6, lastTestTime);
        }
 
        Integer TestState = entity.getTestState();
        if (TestState != null) {
            stmt.bindLong(7, TestState);
        }
 
        String Remark1 = entity.getRemark1();
        if (Remark1 != null) {
            stmt.bindString(8, Remark1);
        }
 
        String Remark2 = entity.getRemark2();
        if (Remark2 != null) {
            stmt.bindString(9, Remark2);
        }
 
        String Remark3 = entity.getRemark3();
        if (Remark3 != null) {
            stmt.bindString(10, Remark3);
        }
    }

    @Override
    protected void attachEntity(StudentItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StudentItem readEntity(Cursor cursor, int offset) {
        StudentItem entity = new StudentItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // StudentItemID
            cursor.getString(offset + 1), // StudentCode
            cursor.getString(offset + 2), // ItemCode
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // lastResult
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // resultState
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastTestTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // TestState
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Remark1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Remark2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // Remark3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StudentItem entity, int offset) {
        entity.setStudentItemID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStudentCode(cursor.getString(offset + 1));
        entity.setItemCode(cursor.getString(offset + 2));
        entity.setLastResult(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setResultState(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLastTestTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTestState(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRemark1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemark2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark3(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StudentItem entity, long rowId) {
        entity.setStudentItemID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StudentItem entity) {
        if(entity != null) {
            return entity.getStudentItemID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "studentItems1" to-many relationship of Student. */
    public List<StudentItem> _queryStudent_StudentItems1(String StudentCode) {
        synchronized (this) {
            if (student_StudentItems1Query == null) {
                QueryBuilder<StudentItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StudentCode.eq(null));
                student_StudentItems1Query = queryBuilder.build();
            }
        }
        Query<StudentItem> query = student_StudentItems1Query.forCurrentThread();
        query.setParameter(0, StudentCode);
        return query.list();
    }

    /** Internal query to resolve the "studentItems2" to-many relationship of Item. */
    public List<StudentItem> _queryItem_StudentItems2(String ItemCode) {
        synchronized (this) {
            if (item_StudentItems2Query == null) {
                QueryBuilder<StudentItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ItemCode.eq(null));
                item_StudentItems2Query = queryBuilder.build();
            }
        }
        Query<StudentItem> query = item_StudentItems2Query.forCurrentThread();
        query.setParameter(0, ItemCode);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getStudentDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getItemDao().getAllColumns());
            builder.append(" FROM STUDENT_ITEM T");
            builder.append(" LEFT JOIN STUDENT T0 ON T.'STUDENT_CODE'=T0.'STUDENT_CODE'");
            builder.append(" LEFT JOIN ITEM T1 ON T.'ITEM_CODE'=T1.'ITEM_CODE'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected StudentItem loadCurrentDeep(Cursor cursor, boolean lock) {
        StudentItem entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Student student = loadCurrentOther(daoSession.getStudentDao(), cursor, offset);
         if(student != null) {
            entity.setStudent(student);
        }
        offset += daoSession.getStudentDao().getAllColumns().length;

        Item item = loadCurrentOther(daoSession.getItemDao(), cursor, offset);
         if(item != null) {
            entity.setItem(item);
        }

        return entity;    
    }

    public StudentItem loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<StudentItem> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<StudentItem> list = new ArrayList<StudentItem>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<StudentItem> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<StudentItem> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
