package ww.greendao.dao;

import java.util.List;
import ww.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table STUDENT.
 */
public class Student {

    private String StudentCode;
    private String StudentName;
    private Integer Sex;
    private String ClassCode;
    private String GradeCode;
    private String IDCardNo;
    private String ICCardNo;
    private String DownloadTime;
    private String Remark1;
    private String Remark2;
    private String Remark3;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StudentDao myDao;

    private List<StudentItem> studentItems1;

    public Student() {
    }

    public Student(String StudentCode) {
        this.StudentCode = StudentCode;
    }

    public Student(String StudentCode, String StudentName, Integer Sex, String ClassCode, String GradeCode, String IDCardNo, String ICCardNo, String DownloadTime, String Remark1, String Remark2, String Remark3) {
        this.StudentCode = StudentCode;
        this.StudentName = StudentName;
        this.Sex = Sex;
        this.ClassCode = ClassCode;
        this.GradeCode = GradeCode;
        this.IDCardNo = IDCardNo;
        this.ICCardNo = ICCardNo;
        this.DownloadTime = DownloadTime;
        this.Remark1 = Remark1;
        this.Remark2 = Remark2;
        this.Remark3 = Remark3;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStudentDao() : null;
    }

    public String getStudentCode() {
        return StudentCode;
    }

    public void setStudentCode(String StudentCode) {
        this.StudentCode = StudentCode;
    }

    public String getStudentName() {
        return StudentName;
    }

    public void setStudentName(String StudentName) {
        this.StudentName = StudentName;
    }

    public Integer getSex() {
        return Sex;
    }

    public void setSex(Integer Sex) {
        this.Sex = Sex;
    }

    public String getClassCode() {
        return ClassCode;
    }

    public void setClassCode(String ClassCode) {
        this.ClassCode = ClassCode;
    }

    public String getGradeCode() {
        return GradeCode;
    }

    public void setGradeCode(String GradeCode) {
        this.GradeCode = GradeCode;
    }

    public String getIDCardNo() {
        return IDCardNo;
    }

    public void setIDCardNo(String IDCardNo) {
        this.IDCardNo = IDCardNo;
    }

    public String getICCardNo() {
        return ICCardNo;
    }

    public void setICCardNo(String ICCardNo) {
        this.ICCardNo = ICCardNo;
    }

    public String getDownloadTime() {
        return DownloadTime;
    }

    public void setDownloadTime(String DownloadTime) {
        this.DownloadTime = DownloadTime;
    }

    public String getRemark1() {
        return Remark1;
    }

    public void setRemark1(String Remark1) {
        this.Remark1 = Remark1;
    }

    public String getRemark2() {
        return Remark2;
    }

    public void setRemark2(String Remark2) {
        this.Remark2 = Remark2;
    }

    public String getRemark3() {
        return Remark3;
    }

    public void setRemark3(String Remark3) {
        this.Remark3 = Remark3;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StudentItem> getStudentItems1() {
        if (studentItems1 == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentItemDao targetDao = daoSession.getStudentItemDao();
            List<StudentItem> studentItems1New = targetDao._queryStudent_StudentItems1(StudentCode);
            synchronized (this) {
                if(studentItems1 == null) {
                    studentItems1 = studentItems1New;
                }
            }
        }
        return studentItems1;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStudentItems1() {
        studentItems1 = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
