package ww.greendao.dao;

import java.util.List;
import ww.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SCHOOL.
 */
public class School {

    private Long SchoolID;
    /** Not-null value. */
    private String SchoolName;
    private String SchoolYear;
    private String Remark1;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SchoolDao myDao;

    private List<Grade> grades;

    public School() {
    }

    public School(Long SchoolID) {
        this.SchoolID = SchoolID;
    }

    public School(Long SchoolID, String SchoolName, String SchoolYear, String Remark1) {
        this.SchoolID = SchoolID;
        this.SchoolName = SchoolName;
        this.SchoolYear = SchoolYear;
        this.Remark1 = Remark1;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSchoolDao() : null;
    }

    public Long getSchoolID() {
        return SchoolID;
    }

    public void setSchoolID(Long SchoolID) {
        this.SchoolID = SchoolID;
    }

    /** Not-null value. */
    public String getSchoolName() {
        return SchoolName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSchoolName(String SchoolName) {
        this.SchoolName = SchoolName;
    }

    public String getSchoolYear() {
        return SchoolYear;
    }

    public void setSchoolYear(String SchoolYear) {
        this.SchoolYear = SchoolYear;
    }

    public String getRemark1() {
        return Remark1;
    }

    public void setRemark1(String Remark1) {
        this.Remark1 = Remark1;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Grade> getGrades() {
        if (grades == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GradeDao targetDao = daoSession.getGradeDao();
            List<Grade> gradesNew = targetDao._querySchool_Grades(SchoolID);
            synchronized (this) {
                if(grades == null) {
                    grades = gradesNew;
                }
            }
        }
        return grades;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGrades() {
        grades = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
